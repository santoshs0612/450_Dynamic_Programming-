Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:

Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10}
Example 2:
Input: N = 5, arr[] = {1, 2, 3, 4, 5}
       sum = 10
Output: 3
Explanation: {1, 2, 3, 4}, {1, 4, 5}, 
             {2, 3, 5}













//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

	public:
	int solver(int arr[],int n,int sum)
	{
	    if(sum==0)
	    {
	        return 1;
	    }
	    if(n==0)
	    {
	        return 0;
	    }
	    if(arr[n-1]<=sum)
	    {
	        return solver(arr,n-1,sum-arr[n-1])+solver(arr,n-1,sum);
	    }
	    else
	    {
	        return solver(arr,n-1,sum);
	    }
	}
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here 
        ///////////
        // Recurrsive approach 
        //////////
        // return solver(arr,n,sum);
        
        //////////
        // TOP Down Approach 
        /////////
        int MOD=1000000007;
        vector<vector<int>> dp(n+1,vector<int>(sum+1));
        
        //initialization
        
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0)
                {
                    dp[i][j]=0;
                }
            }
        }
        dp[0][0]=1;
        
        // main logic 
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                
                if(arr[i-1]<=j){
                    dp[i][j]= (dp[i-1][j-arr[i-1]])%MOD+(dp[i-1][j])%MOD;
                }
                else 
                {
                    dp[i][j]= (dp[i-1][j])%MOD;
                }
            }
        }
        return dp[n][sum]%MOD;
	}
	  
};

//{ Driver Code Starts.
int main() 
{
   	
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n, sum;

        cin >> n >> sum;

        int a[n];
        for(int i = 0; i < n; i++)
        	cin >> a[i];

       

	    Solution ob;
	    cout << ob.perfectSum(a, n, sum) << "\n";
	     
    }
    return 0;
}

// } Driver Code Ends

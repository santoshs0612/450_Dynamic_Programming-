Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:

Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10}
Example 2:
Input: N = 5, arr[] = {1, 2, 3, 4, 5}
       sum = 10
Output: 3
Explanation: {1, 2, 3, 4}, {1, 4, 5}, 
             {2, 3, 5}













#include <bits/stdc++.h> 
int MOD=1000000007;
int solver_Rec(vector<int> &arr,int n,int sum)
{
    if(sum==0)
    {
        return 1;
    }
    if(n==0)
    {
        return arr[0]==sum;
    }
    int not_take= solver_Rec(arr,n-1,sum);
    int take= 0;
    if(arr[n]<=sum){
        take=solver_Rec(arr,n-1,sum-arr[n]);
    }
    return (take%MOD+not_take%MOD)%MOD;
}

int solver_Mem(vector<int> &arr,int n,int sum,vector<vector<int>> &dp)
{
    if(sum==0)
    {
        return 1;
    }
    if(n==0)
    {
        return arr[0]==sum;
    }
    if(dp[n][sum]!=-1)
    {
        return dp[n][sum]%MOD;
    }
    int not_take= solver_Mem(arr,n-1,sum,dp);
    int take= 0;
    if(arr[n]<=sum){
        take=solver_Mem(arr,n-1,sum-arr[n],dp);
    }
    return dp[n][sum]=(take%MOD+not_take%MOD)%MOD;
}
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    ////////////////////////////
    // Recursion
    ///////////////////////////
    //int n= num.size();
    //return solver_Rec(num,n-1,tar);
    
    //////////////////////////////////
    // Memomorization 
    //////////////////////////////
//     int n= num.size();
//     vector<vector<int>> dp(n,vector<int>(tar+1,-1));
//     return solver_Mem(num,n-1,tar,dp);
    
    /////////////////////////////
    // Tabulation Bottom Up
    /////////////////////////////
    
    int n= num.size();
    vector<vector<int>> dp(n,vector<int>(tar+1,0));
    
    for(int i=0;i<n;i++)
    {
        dp[i][0]=1;
    }
    if(num[0]<=tar)
    {
        dp[0][num[0]]=1;
    }
    
    for(int ind= 1;ind<n;ind++)
    {
        for(int sum=0;sum<=tar;sum++)
        {
           int not_take= dp[ind-1][sum];
            int take= 0;
            if(num[ind]<=sum){
                take=dp[ind-1][sum-num[ind]];
            }
            dp[ind][sum]=(take%MOD+not_take%MOD)%MOD;   
        }
    }
    return dp[n-1][tar];
    
    
    
    
    
    
    

}

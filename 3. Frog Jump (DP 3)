Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. At a time the frog can climb either one or two steps. A height[N] array is also given. Whenever the frog jumps from a stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. We need to return the minimum energy that can be used by the frog to jump from stair 0 to stair N-1.

Examples:

2
4

10 20 30 10
3
10 50 10
Sample Output 1:
20
0
Explanation Of Sample Input 1:
For the first test case,
The frog can jump from 1st stair to 2nd stair (|20-10| = 10 energy lost).
Then a jump from the 2nd stair to the last stair (|10-20| = 10 energy lost).
So, the total energy lost is 20 which is the minimum. 
Hence, the answer is 20.

For the second test case:
The frog can jump from 1st stair to 3rd stair (|10-10| = 0 energy lost).
So, the total energy lost is 0 which is the minimum. 
Hence, the answer is 0.
Sample Input 2:
2
8
7 4 4 2 6 6 3 4 
6
4 8 3 10 4 4 
Sample Output 2:
7
2










#include <bits/stdc++.h> 

int solver_Rec(int n , vector<int> & val)
{
    if(n==0)
    {
        return 0;
    }
    int step_1= solver_Rec(n-1,val)+abs(val[n]-val[n-1]);
    int step_2=INT_MAX;
    if(n>1)
    {
        step_2= solver_Rec(n-2,val)+abs(val[n]-val[n-2]);
    }
    return min(step_1,step_2);
}

int solver_Mem(int n , vector<int> & val,vector<int> &dp)
{
    if(n==0)
    {
        return 0;
    }
    if(dp[n]!=-1)
    {
        return dp[n];
    }
    int step_1= solver_Mem(n-1,val,dp)+abs(val[n]-val[n-1]);
    int step_2=INT_MAX;
    if(n>1)
    {
        step_2= solver_Mem(n-2,val,dp)+abs(val[n]-val[n-2]);
    }
    return dp[n]= min(step_1,step_2);
}
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    ////////////////////
    // Recursion 
    ////////////////////
    
    //return solver_Rec(n-1,heights);
   
    /////////////////////
    // Memorization 
    /////////////////////
//     vector<int> dp(n+1,-1);
    
//     return solver_Mem(n-1,heights,dp);
    
    ////////////////////////
    // Tabulation or Bottom UP
    ////////////////////////
//     vector<int> dp(n);
//     dp[0]=0;
    
//     for(int i=1;i<n;i++)
//     {
//         int step_1= dp[i-1]+abs(heights[i]-heights[i-1]);
//         int step_2= INT_MAX;
//         if(i>1)
//         {
//             step_2= dp[i-2]+abs(heights[i]-heights[i-2]);
//         }
//         dp[i]= min(step_1,step_2);
//     }
//     return dp[n-1];
    ////////////////////////
    // Tabulation or Bottom UP Optimization
    ////////////////////////
    int prev_1= 0;
    int prev_2= 0;
    int curr;
    
    for(int i=1;i<n;i++)
    {
        int step_1= prev_1+abs(heights[i]-heights[i-1]);
        int step_2= INT_MAX;
        if(i>1)
        {
            step_2= prev_2+abs(heights[i]-heights[i-2]);
        }
        curr= min(step_1,step_2);
        prev_2=prev_1;
        prev_1=curr;
    }
    return prev_1;
    
}

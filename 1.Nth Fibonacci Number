Given a positive integer n, find the nth fibonacci number. Since the answer can be very large, return the answer modulo 1000000007.

Example 1:

Input: n = 2
Output: 1 
Explanation: 1 is the 2nd number
of fibonacci series.
Example 2:

Input: n = 5
Output: 5
Explanation: 5 is the 5th number
of fibonacci series.




class Solution {
  public:
    #define MOD 1000000007
    typedef long long int lli;
    lli solver_Rec(lli n)
    {
        if(n<=1)
        {
            return n;
        }
        
        return (solver_Rec(n-1)%MOD+solver_Rec(n-2)%MOD)%MOD;
        
    }
    lli solver_Mem(lli n, vector<lli> &dp)
    {
        if(n<=1)
        {
            return n;
        }
        if(dp[n]!=-1)
        {
            return dp[n]%MOD;
        }
        
        return dp[n]=(solver_Mem(n-1,dp)%MOD+solver_Mem(n-2,dp)%MOD)%MOD;
        
    }
    long long int nthFibonacci(long long int n){
        // code here
        ///////////////////////
        // Recursion 
        //////////////////////
        
        //return solver_Rec(n); 
        
        //////////////////////
        // Memorization 
        /////////////////////
        
        // vector<lli> dp(n+1,-1);
        
        // return solver_Mem(n,dp);
        
        ////////////////////////
        // Tabulation 
        ////////////////////////
        
        // vector<lli> dp(n+1);
        // // Initialization 
        // dp[0]=0;
        // dp[1]=1;
        
        // for(int i=2;i<n+1;i++)
        // {
        //     dp[i]= (dp[i-1]%MOD+dp[i-2]%MOD)%MOD;
        // }
        // return dp[n]%MOD;
        
        ////////////////////////
        // Tabulation Optimization 
        ////////////////////////
         int prev1=1;
         int prev2=0;
         int curr;
         for(int i=2;i<n+1;i++)
         {
             curr= (prev1%MOD+prev2%MOD)%MOD;
             prev2=prev1%MOD;
             prev1= curr%MOD;
             
         }
         return prev1%MOD;
    }
};


Given an array arr of size N containing non-negative integers, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the minimum difference


Example 1:

Input: N = 4, arr[] = {1, 6, 11, 5} 
Output: 1
Explanation: 
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11   
Example 2:
Input: N = 2, arr[] = {1, 4}
Output: 3
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {4}, sum of Subset2 = 4





//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

  public:
	int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    
	    int total_sum=0;
	    for(int i=0;i<n;i++)
	    {
	        total_sum+=arr[i];
	    }
	    int sum= total_sum;
	    // initialization 
	    vector<vector<int>> dp(n+1,vector<int>(total_sum+1));
	    
	    for(int i=0;i<n+1;i++)
	    {
	        for(int j=0;j<total_sum+1;j++)
	        {
	            if(i==0)
	            {
	                dp[i][j]=0;
	            }
	            if(j==0)
	            {
	                dp[i][j]=1;
	            }
	        }
	    }
	    
	    for(int i=1;i<n+1;i++)
	    {
	        for(int j=1;j<total_sum+1;j++)
	        {
	            
	            if(arr[i-1]<=j)
	            {
	                dp[i][j]= dp[i-1][j-arr[i-1]]||dp[i-1][j];
	            }
	            else 
	            {
	                dp[i][j]= dp[i-1][j];
	                }
	        }
	    }
	    int mini=INT_MAX;
	    
	    for(int s1=0;s1<sum+1;s1++)
	    {
	        // s2=sum-s1;
	        if(dp[n][s1]==1)
	        {
	            mini= min(mini,abs((sum-s1)-s1));
	        }
	    }
	    return mini;
	} 
};


//{ Driver Code Starts.
int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;

        int a[n];
        for(int i = 0; i < n; i++)
        	cin >> a[i];

       

	    Solution ob;
	    cout << ob.minDifference(a, n) << "\n";
	     
    }
    return 0;
}
// } Driver Code Ends

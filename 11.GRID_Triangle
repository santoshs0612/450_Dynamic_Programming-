Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10



class Solution {
public:
    
    int solver_Rec(int i,int j, vector<vector<int>>& triangle,int n)
    {
        if(i==n-1)
        {
            return triangle[i][j];
        }
        
        int d= triangle[i][j]+solver_Rec(i+1,j,triangle,n);
        int dg= triangle[i][j]+solver_Rec(i+1,j+1,triangle,n);
        return min(d,dg);
    }
    
    int solver_Mem(int i,int j, vector<vector<int>>& triangle,int n,vector<vector<int>> &dp)
    {
        if(i==n-1)
        {
            return triangle[i][j];
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int d= triangle[i][j]+solver_Mem(i+1,j,triangle,n,dp);
        int dg= triangle[i][j]+solver_Mem(i+1,j+1,triangle,n,dp);
        
        return dp[i][j]=min(d,dg);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        
        
        int n = triangle.size();
        
        
        ////////////////////////////////
        // Recursion 
        ///////////////////////////////
        
        //return solver_Rec(0,0,triangle,n);
        
        
        /////////////////////////////////
        // Memorization 
        ////////////////////////////////
        
//         vector<vector<int>> dp(n,vector<int>(n,-1));
        
//         return solver_Mem(0,0,triangle,n,dp);
        
        
        //////////////////////////////
        // Tabulation  
        /////////////////////////////
        
//         vector<vector<int>> dp(n,vector<int>(n,0));
        
        
//         for(int k=0;k<n;k++)
//         {
//             dp[n-1][k]= triangle[n-1][k];
//         }
        
//         for(int i =n-2;i>=0;i--)
//         {
//             for(int j=i;j>=0;j--)
//             {
//                 int d= triangle[i][j]+dp[i+1][j];
//                 int dg= triangle[i][j]+dp[i+1][j+1];
//                 dp[i][j]= min(d,dg);
//             }
//         }
        
//         return dp[0][0];
        
        /////////////////////////////////
        // Tabulation +space Optimization 
        /////////////////////////////////
        
        
        vector<int> front(n,0);
        for(int i=0;i<n;i++)
        {
            front[i]=triangle[n-1][i];
        }    
        for(int i =n-2;i>=0;i--)
        {
            vector<int> curr(n,0);
            for(int j=i;j>=0;j--)
            {
                int d= triangle[i][j]+front[j];
                int dg= triangle[i][j]+front[j+1];
                curr[j]= min(d,dg);
            }
            
            front = curr;
        }
        
        return front[0];
        
    }
};

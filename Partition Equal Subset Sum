Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.
Example 2:

Input: N = 3
arr = {1, 3, 5}
Output: NO
Explanation: This array can never be 
partitioned into two such parts.



//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
// Recurssive function 
    int solver(int arr[],int n,int sum)
    {
        
        if(sum==0)
        {
            return 1;
        }
        else if(n==0)
        {
            return 0;
        }
        if(arr[n-1]<= sum)
        {
            return solver(arr,n-1,sum-arr[n-1]) || solver(arr,n-1,sum);
        }
        else 
        {
            return solver(arr,n-1,sum);
        }
    }
// Memorization 
    int solverMem(int arr[],int n,int sum,vector<vector<int>> &dp)
    {
        
        if(sum==0)
        {
            return 1;
        }
        else if(n==0)
        {
            return 0;
        }
        //Memorization 
        if(dp[n][sum]!=-1)
        {
            return dp[n][sum];
        }
        if(arr[n-1]<= sum)
        {
            return dp[n][sum]=solverMem(arr,n-1,sum-arr[n-1],dp) || solverMem(arr,n-1,sum,dp);
        }
        else 
        {
            return dp[n][sum]=solverMem(arr,n-1,sum,dp);
        }
    }
    int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=arr[i];
        }
        if(sum%2!=0)
        {
            return 0;
        }
        sum/=2;
        
        ////////
        // Recurssive Approach 
        ///////
        //return solver(arr,N,sum);
        
        ///////
        // Memorization
        ///////
        
        // vector<vector<int>> dp(N+1,vector<int>(sum+1,-1));
        // return solverMem(arr,N,sum,dp);
        
        ///////
        //Top Down 
        //////
        
        vector<vector<int>> dp(N+1,vector<int>(sum+1));
        
        for(int i=0;i<N+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0)
                {
                    dp[i][j]=0;
                }
                if(j==0)
                {
                    dp[i][j]=1;
                }
            }
        }

        for(int i=1;i<N+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j]= dp[i-1][j-arr[i-1]]||dp[i-1][j];
                }
                else
                {
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        return dp[N][sum];
        
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}
// } Driver Code Ends

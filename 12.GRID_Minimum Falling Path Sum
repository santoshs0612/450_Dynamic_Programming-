
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.





class Solution {
public:
    int solver_Rec(int i,int j,vector<vector<int>> &matrix)
    {
        if(j<0 || j>=matrix[0].size())
        {
            return 1e8;
        }
        if(i==0)
        {
            return matrix[0][j];
        }
        
        int u= matrix[i][j]+solver_Rec(i-1,j,matrix);
        int ld= matrix[i][j]+solver_Rec(i-1,j-1,matrix);
        int rd= matrix[i][j]+solver_Rec(i-1,j+1,matrix);
        return min(u,min(ld,rd));
    }
    
    int solver_Mem(int i,int j,vector<vector<int>> &matrix,vector<vector<int>> &dp)
    {
        if(j<0 || j>=matrix[0].size())
        {
            return 1e8;
        }
        if(i==0)
        {
            return matrix[0][j];
        }
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int u= matrix[i][j]+solver_Mem(i-1,j,matrix,dp);
        int ld= matrix[i][j]+solver_Mem(i-1,j-1,matrix,dp);
        int rd= matrix[i][j]+solver_Mem(i-1,j+1,matrix,dp);
        return dp[i][j]=min(u,min(ld,rd));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        
        int n =matrix.size();
        int m = matrix[0].size();
        
        
        /////////////////////////
        // Recursion 
        ////////////////////////
        
        // int mini= 1e8;
        // for(int j=0;j<m;j++)
        // {
        //      mini = min(mini,solver_Rec(n-1,j,matrix));
        // }
        // return mini;
        
        /////////////////////////
        // Memorization 
        ////////////////////////
//         vector<vector<int>> dp(n,vector<int>(m,-1));
        
//         int mini= 1e8;
//         for(int j=0;j<m;j++)
//         {
//              mini = min(mini,solver_Mem(n-1,j,matrix,dp));
//         }
//         return mini;
        
        ///////////////////////////
        // Top Down Approach
        //////////////////////////
        
//         vector<vector<int>> dp(n,vector<int>(m,0));
        
//         for(int j=0;j<m;j++)
//         {
//             dp[0][j]= matrix[0][j];
//         }
        
//         for(int i=1;i<n;i++)
//         {
//             for(int j=0;j<m;j++)
//             {
//                 int u= matrix[i][j]+dp[i-1][j];
//                 int ld= matrix[i][j];
//                 if(j>0)
//                 {
//                     ld+=dp[i-1][j-1];
//                 }
//                 else
//                 {
//                     ld+=1e8;
//                 }
//                 int rd= matrix[i][j];
//                 if(j+1<m)
//                 {
//                     rd+=dp[i-1][j+1];
//                 }
//                 else
//                 {
//                     rd+=1e8;
//                 }
                
//                 dp[i][j]= min(u,min(ld,rd));
//             }
//         }
//         int mini= 1e8;
//         for(int j=0;j<m;j++)
//         {
//              mini = min(mini,dp[n-1][j]);
//         }
//         return mini;
        //////////////////////////////
        // Tabulation + Space Optimization 
        //////////////////////////////
        
        vector<int> prev(m,0), curr(m,0);
        
        for(int j=0;j<m;j++)
        {
            prev[j]= matrix[0][j];
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                int u= matrix[i][j]+prev[j];
                int ld= matrix[i][j];
                if(j>0)
                {
                    ld+=prev[j-1];
                }
                else
                {
                    ld+=1e8;
                }
                int rd= matrix[i][j];
                if(j+1<m)
                {
                    rd+=prev[j+1];
                }
                else
                {
                    rd+=1e8;
                }
                
                curr[j]= min(u,min(ld,rd));
            }
            
            prev= curr;
        }
        int mini= 1e8;
        for(int j=0;j<m;j++)
        {
             mini = min(mini,prev[j]);
        }
        return mini;
        
        
    }
};

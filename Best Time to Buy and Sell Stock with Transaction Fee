You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6











class Solution {
public:
int solver_Rec(int ind, int buy,vector<int> &prices,int n,int fee)
{
    if(ind == n)
    {
        return 0;
    }
    
    int profit=0;
    
    if(buy)
    {
        profit= max(-prices[ind]+solver_Rec(ind+1,0,prices,n,fee),solver_Rec(ind+1,1,prices,n,fee));
    }
    else 
    {
        profit = max(prices[ind]-fee+solver_Rec(ind+1,1,prices,n,fee),0+solver_Rec(ind+1,0,prices,n,fee));
    }
    return profit;
}
    int maxProfit(vector<int>& prices, int fee) {
        
        /////////////////////////
        // Recurcion 
        /////////////////////////
        return solver_Rec(0,1,prices,prices.size(),fee);
        
//         int aheadNotBuy, aheadBuy,curBuy, curNotBuy;
//         aheadNotBuy=aheadBuy=0;
//         int n= prices.size();
//         for(int ind= n-1;ind>=0;ind--)
//         {
//             curNotBuy= max(prices[ind]-fee+aheadBuy, 0+aheadNotBuy);
//             curBuy= max(-prices[ind]+aheadNotBuy,0+aheadBuy);
//             aheadBuy= curBuy;
//             aheadNotBuy= curNotBuy;
//         }
//         return aheadBuy; 
        
    }
};

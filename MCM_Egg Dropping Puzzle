You are given N identical eggs and you have access to a K-floored building from 1 to K.

There exists a floor f where 0 <= f <= K such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. There are few rules given below. 

An egg that survives a fall can be used again.
A broken egg must be discarded.
The effect of a fall is the same for all eggs.
If the egg doesn't break at a certain floor, it will not break at any floor below.
If the eggs breaks at a certain floor, it will break at any floor above.
Return the minimum number of moves that you need to determine with certainty what the value of f is.

For more description on this problem see wiki page

Example 1:

Input:
N = 1, K = 2
Output: 2
Explanation: 
1. Drop the egg from floor 1. If it 
   breaks, we know that f = 0.
2. Otherwise, drop the egg from floor 2.
   If it breaks, we know that f = 1.
3. If it does not break, then we know f = 2.
4. Hence, we need at minimum 2 moves to
   determine with certainty what the value of f is.
Example 2:

Input:
N = 2, K = 10
Output: 4












{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int solver_Rec(int e,int f)
    {
        if(f==0 || f==1)
        {
            return f;
        }
        if(e==1)
        {
            return f;
        }
        int mn = INT_MAX;
        for(int k=1;k<=f;k++)
        {
            int temp= 1+max(solver_Rec(e-1,k-1), solver_Rec(e,f-k));
            
            mn= min(mn,temp);
        }
        return mn;
    }

    int solver_Mem(int e,int f,vector<vector<int>> &dp)
    {
        if(f==0 || f==1)
        {
            return f;
        }
        if(e==1)
        {
            return f;
        }
        
        if(dp[e][f]!=-1)
        {
            return dp[e][f];
        }
        int mn = INT_MAX;
        for(int k=1;k<=f;k++)
        {
            int temp= 1+max(solver_Mem(e-1,k-1,dp), solver_Mem(e,f-k,dp));
            
            mn= min(mn,temp);
        }
        return  dp[e][f]=mn;
    }
    int solver_Mem(int e,int f,vector<vector<int>> &dp)
    {
        if(f==0 || f==1)
        {
            return f;
        }
        if(e==1)
        {
            return f;
        }
        
        if(dp[e][f]!=-1)
        {
            return dp[e][f];
        }
        int mn = INT_MAX;
        int low=0,up=0;
        for(int k=1;k<=f;k++)
        {
            if(dp[e-1][k-1]!=-1)
            {
                low= dp[e-1][k-1];
            }
            else 
            {
                low = solver_Mem(e-1,k-1,dp);
                dp[e-1][k-1]=low;
            }
            if(dp[e][f-k]!=-1)
            {
                up= dp[e][f-k];
            }
            else 
            {
                 up = solver_Mem(e,f-k,dp);
                 dp[e][f-k]= up;
            }
            int temp= 1+max(low,up);
            
            mn= min(mn,temp);
        }
        return  dp[e][f]=mn;
    }
    int eggDrop(int n, int k) 
    {
        // your code here
        
        //////////////////////
        // Recurssion 
        /////////////////////
        //return solver_Rec(n,k);
        
        ///////////////////////
        // Memorization 
        ///////////////////////
        
        vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
        
        return solver_Mem(n,k,dp);
        ///////////////////////
        // Memorization Optimization 
        ///////////////////////
        
        vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
        
        return solver_Mem(n,k,dp);
    }
};

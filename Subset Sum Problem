Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


Example 1:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.
Example 2:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 30
Output: 0 
Explanation: There is no subset with sum 30.




//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
    bool solver(vector<int> &arr,int sum,int n)
    {
        if(sum==0)
        {
            return true;
        }
        else if(n<=0)
        {
            return false;
        }
        
        if(arr[n-1]<=sum)
        {
            return solver(arr,sum-arr[n-1],n-1)||solver(arr,sum,n-1);
        }
        else 
        {
            return solver(arr,sum,n-1);
        }
    }
    bool solverMem(vector<int> &arr, int sum,int n,vector<vector<int>> &dp)
    {
        if(sum==0)
        {
            return 1;
        }
        else if(n==0)
        {
            return 0;
        }
        if(dp[n][sum]!=-1)
        {
            return dp[n][sum];
        }
        
        if(arr[n-1]<=sum)
        {
            return dp[n][sum]=solverMem(arr,sum-arr[n-1],n-1,dp)||solverMem(arr,sum,n-1,dp);
        }
        else 
        {
            return dp[n][sum]=solverMem(arr,sum,n-1,dp);
        }
        
    }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        
        
        ////////////
        // Recurssion 
        ///////////
        // int n= arr.size();
        // return solver(arr,sum,n);
        
        ///////////
        // Memorization 
        //////////
        // int n= arr.size();
        // vector<vector<int>> dp(n+1,vector<int>(sum+1,-1));
        // return solverMem(arr,sum,n,dp);
        
        
        /////////
        // TOP DOWN Approach
        int n= arr.size();
        vector<vector<int>> dp(n+1,vector<int>(sum+1));
        // Initialization
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0)
                {
                    dp[i][j]=false;
                }
                if(j==0)
                {
                    dp[i][j]=true;
                }
            }
        }
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j]= dp[i-1][j-arr[i-1]]|| dp[i-1][j];
                }
                else 
                {
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
        
        
    }
};

//{ Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, sum;
        cin >> N;
        vector<int> arr(N);
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }
        cin >> sum;
        
        Solution ob;
        cout << ob.isSubsetSum(arr, sum) << endl;
    }
    return 0; 
} 

// } Driver Code Ends

There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top (order does matter).

Example 1:

Input:
n = 4
Output: 5
Explanation:
You can reach 4th stair in 5 ways. 
Way 1: Climb 2 stairs at a time. 
Way 2: Climb 1 stair at a time.
Way 3: Climb 2 stairs, then 1 stair
and then 1 stair.
Way 4: Climb 1 stair, then 2 stairs
then 1 stair.
Way 5: Climb 1 stair, then 1 stair and
then 2 stairs.
Example 2:

Input:
n = 10
Output: 89 
Explanation: 
There are 89 ways to reach the 10th stair.




{
    public:
    //Function to count number of ways to reach the nth stair.
    #define MOD 1000000007
    int solver_Rec(int n)
    {
        if(n==0)
        {
            return 1;
        }
        if(n<0)
        {
            return 0;
        }
        int step_1= solver_Rec(n-1);
        int step_2= solver_Rec(n-2);
        return step_1+step_2;
    }
    int solver_Mem(int n,vector<int> &dp)
    {
        
        if(n==0)
        {
            return dp[n]=1;
        }
        if(n<0)
        {
            return 0;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        int step_1= solver_Mem(n-1,dp);
        int step_2= solver_Mem(n-2,dp);
        return dp[n]=(step_1%MOD+step_2%MOD)%MOD;
    }
    int countWays(int n)
    {
        // your code here
        
        //////////////////////
        // Recursion 
        /////////////////////
        
        //return solver_Rec(n);
        
        ////////////////////
        // Memorization  
        ///////////////////
        // vector<int> dp(n+1,-1);
        
        // return solver_Mem(n,dp);
        
        ////////////////////////
        // Top down Tabulation 
        ///////////////////////
        
        // vector<int> dp(n+1);
        
        // dp[0] =1;
        // dp[1]=1;
        
        // for(int i=1;i<n+1;i++)
        // {
        //     dp[i]= (dp[i-1]%MOD+dp[i-2]%MOD)%MOD;
        // }
        // return dp[n];
        
        ///////////////////////////
        // Top down Optimization 
        //////////////////////////
        
        int prev1=1;
        int prev2=1;
        int curr;
        for(int i=2;i<n+1;i++)
        {
            curr= (prev1%MOD+prev2%MOD)%MOD;
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
        
    }
};

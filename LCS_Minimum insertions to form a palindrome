
Given string str, the task is to find the minimum number of characters to be inserted to convert it to a palindrome.

Before we go further, let us understand with a few examples: 

ab: Number of insertions required is 1 i.e. bab
aa: Number of insertions required is 0 i.e. aa
abcd: Number of insertions required is 3 i.e. dcbabcd
abcda: Number of insertions required is 2 i.e. adcbcda which is the same as the number of insertions in the substring bcd(Why?).
abcde: Number of insertions required is 4 i.e. edcbabcde

Input: str = "abcd"
Output: 3
Explanation: Inserted character marked
with bold characters in dcbabcd
Example 2:

Input: str = "aa"
Output: 0
Explanation:"aa" is already a palindrome.


class Solution{
  public:
    int countMin(string str){
    //complete the function here
    string str1=str;
    reverse(str1.begin(),str1.end());
    // finding the longest palendrome in string
    int n=str.length();
    int lps_count;
    vector<vector<int>> dp(n+1,vector<int>(n+1));
    
    for(int i=0;i<n+1;i++)
    {
        for(int j=0;j<n+1;j++)
        {
            if(i==0||j==0)
            {
                dp[i][j]=0;
            }
        }
    }
    
    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<n+1;j++)
        {
            if(str[i-1]==str1[j-1])
            {
                dp[i][j]= dp[i-1][j-1]+1;
            }
            else 
            {
                dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    
    lps_count= dp[n][n];
    
    return n-lps_count;
    
    }
};

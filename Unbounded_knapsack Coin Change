Given an integer array coins[ ] of size N representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ].  
Note: Assume that you have an infinite supply of each type of coin. 


Example 1:

Input:
sum = 4 , 
N = 3
coins[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.
Example 2:

Input:
Sum = 10 , 
N = 4
coins[] ={2,5,3,6}
Output: 5
Explanation: Five Possible ways are:
{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} 
and {5,5}.

















  public:
  
    long long int solver_Rec(int coins[],int N,int sum)
    {

        if(sum==0)
        {
            return 1;
        }
        
        if(N==0)
        {
            if(sum==0){
                return 1;
            }
            return 0;
        }
        if(sum>=coins[N-1])
        {
            return solver_Rec(coins,N,sum-coins[N-1])+solver_Rec(coins,N-1,sum);
        }
        else 
        {
            return solver_Rec(coins,N-1,sum);
        }
    }

    long long int solver_Mem(int coins[],int N,int sum,vector<vector<long long int>> &dp)
    {

        if(sum==0)
        {
            return 1;
        }
        
        if(N==0)
        {
            if(sum==0){
                return 1;
            }
            return 0;
        }
        if(dp[N][sum]!=-1)
        {
            return dp[N][sum];
        }
        if(sum>=coins[N-1])
        {
            return dp[N][sum]=solver_Mem(coins,N,sum-coins[N-1],dp)+solver_Mem(coins,N-1,sum,dp);
        }
        else 
        {
            return dp[N][sum]=solver_Mem(coins,N-1,sum,dp);
        }
    }
    long long int count(int coins[], int N, int sum) {

        // code here.
        
        ////////////
        // ReCurrsive Solutions
        ///////////
        
        // return solver_Rec(coins,N,sum);
        
        
        //////////
        // Recurssive Memorization 
        /////////
        
        // vector<vector<long long int>> dp(N+1,vector<long long int>(sum+1,-1));
        
        // solver_Mem(coins,N,sum,dp);
        // return dp[N][sum];
        
        ///////////
        //Top Down Approach
        //////////
        
        // Initialization 
        
        vector<vector<long long int>> dp(N+1,vector<long long int>(sum+1));
        for(int i=0;i<N+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0)
                {
                    dp[i][j]=0;
                }
                if(j==0)
                {
                    dp[i][j]=1;
                }
            }
        }
        
        
        for(int i=1;i<N+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(coins[i-1]<=j)
                {
                    dp[i][j]= dp[i][j-coins[i-1]]+dp[i-1][j];
                }
                else 
                {
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        return dp[N][sum];
    }
};

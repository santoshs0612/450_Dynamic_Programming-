Given two strings. The task is to find the length of the longest common substring.


Example 1:

Input: S1 = "ABCDGH", S2 = "ACDGHR", n = 6, m = 6
Output: 4
Explanation: The longest common substring
is "CDGH" which has length 4.
Example 2:

Input: S1 = "ABC", S2 "ACB", n = 3, m = 3
Output: 1
Explanation: The longest common substrings
are "A", "B", "C" all having length 1.




    public:
    
    int solver_Rec(string S1,string S2,int m,int n,int res)
    {
        
        if(m==0||n==0)
        {
            return res;
        }
        
        if(S1[m-1]==S2[n-1])
        {
             res=solver_Rec(S1,S2,m-1,n-1,res+1);
        }
        else 
        {
            res= max(res, max(solver_Rec(S1,S2,m-1,n,0),solver_Rec(S1,S2,m,n-1,0)));
        }
        
        return res;
    }
    

    
    // int solver_Mem(string S1,string S2,int m,int n,int res,vector<vector<int>> &dp)
    // {
        
    //     if(m==0||n==0)
    //     {
    //         dp[m][n]=res;
    //         return res;
    //     }
    //     if(dp[m][n]!=-1)
    //     {
    //         return dp[m][n];
    //     }
    //     if(S1[m-1]==S2[n-1])
    //     {
    //         dp[m][n]=solver_Mem(S1,S2,m-1,n-1,res+1,dp);
             
    //     }

    //     dp[m][n]= max(res, max(solver_Mem(S1,S2,m-1,n,0,dp),solver_Mem(S1,S2,m,n-1,0,dp)));
            
    //     //return res;
    // }
    
    
    int longestCommonSubstr (string S1, string S2, int n, int m)
    {
        // your code here
        
        //////////////////
        // Recursion 
        /////////////////
        //return solver_Rec(S1,S2,n,m,0);
        
        ///////////////////
        // Memorization 
        ///////////////////
        
        /// Need to write it 
        
        //////////////////
        // Top Down Approach 
        /////////////////
        
        // initialization 
        
        vector<vector<int>> dp(n+1,vector<int>(m+1));
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j]=0;
                }
            }
        }
        int res=0;
        for(int i=1;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                if(S1[i-1]==S2[j-1])
                {
                    dp[i][j]= 1+dp[i-1][j-1];
                    res= max(res,dp[i][j]);
                }
                else 
                {
                    dp[i][j]=0;
                }
            }
        }
        return res;
        
    }
};

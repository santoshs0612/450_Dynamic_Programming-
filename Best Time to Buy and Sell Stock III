
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.









class Solution {
public:
    int solver_Rec(int ind,int buy,int cap,vector<int>&prices,int n)
    {
        if(ind==n)
        {
            return 0;
        }
        if(cap==0)
        {
            return 0;
        }
        
        if(buy)
        {
            return max(-prices[ind]+solver_Rec(ind+1,0,cap,prices,n),0+solver_Rec(ind+1,1,cap,prices,n));
        }
        else 
        {
            return max(prices[ind]+solver_Rec(ind+1,1,cap-1,prices,n),solver_Rec(ind+1,0,cap,prices,n));
        }
    }
    
////// Memorization 
    int solver_Mem(int ind,int buy,int cap,vector<int>&prices,int n,
                  vector<vector<vector<int>>> &dp)
    {
        if(ind==n)
        {
            return 0;
        }
        if(cap==0)
        {
            return 0;
        }
        if(dp[ind][buy][cap]!=-1)
        {
            return  dp[ind][buy][cap];
        }
        if(buy)
        {
            return 
               dp[ind][buy][cap]= max(-prices[ind]+solver_Rec(ind+1,0,cap,prices,n),0+solver_Rec(ind+1,1,cap,prices,n));
        }
        else 
        {
            return dp[ind][buy][cap]=max(prices[ind]+solver_Rec(ind+1,1,cap-1,prices,n),solver_Rec(ind+1,0,cap,prices,n));
        }
    }
    int maxProfit(vector<int>& prices) {
        
        
        /////////////////////
        // Recursion 
        /////////////////////
//         int n = prices.size();
//         return solver_Rec(0,1,2,prices,n);
        
        //////////////////////
        // Memorization 
        //////////////////////
        
        // here 3 variables(index, buy and cap=2) are present so 3-D vector need to costruct 
        // int n= prices.size();
        // vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        // return solver_Mem(0,1,2,prices,n,dp);
        
        
        ////////////////////////////
        // Tabulation Method 
        ////////////////////////////
//         int n = prices.size();
//         vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        
        
//         for(int ind=n-1;ind>=0;ind--)
//         {
//             for(int buy=0;buy<=1;buy++)
//             {
//                 for(int cap=1;cap<=2;cap++)
//                 {
//                     if(buy)
//                         {
//                         dp[ind][buy][cap]= max(-prices[ind]+                                                                                         dp[ind+1][0][cap],                                           0+dp[ind+1][1][cap]);
//                         }
//                         else 
//                         {
//                         dp[ind][buy][cap]=max(prices[ind]+
//                                               dp[ind+1][1][cap-1],
//                                               dp[ind+1][0][cap]);
//                         }
//                 }
//             }
//         }
//         return dp[0][1][2];
        
        
        ///////////////////////////////
        // optimization 
        ///////////////////////////////
        
        int n = prices.size();
        vector<vector<int>> after(2,vector<int>(3,0));
        vector<vector<int>> curr(2,vector<int>(3,0));
        
        
        for(int ind=n-1;ind>=0;ind--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                for(int cap=1;cap<=2;cap++)
                {
                    if(buy)
                        {
                        curr[buy][cap]= max(-prices[ind]+after[0][cap],0+after[1][cap]);
                        }
                        else 
                        {
                        curr[buy][cap]=max(prices[ind]+
                                              after[1][cap-1],
                                              after[0][cap]);
                        }
                }
            }
            
            after= curr;
        }
        return after[1][2];
    }
};
